generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  name        String        @unique @db.VarChar(100)
  released_at DateTime?
  rating      Float?
  image       String?       @db.VarChar(2048)
  screenshots Screenshots[]
  description String?
  trailer     String?       @db.VarChar(2048)
  genres      Genre[]
  platforms   Platform[]
  productKey  ProductsKey[]
}

model Screenshots {
  id     String @id @default(dbgenerated("gen_random_uuid()"))
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String
  url    String @db.VarChar(2048)
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(50)
  games Game[]
}

model Platform {
  id         Int           @id @default(autoincrement())
  name       String        @unique @db.VarChar(50)
  games      Game[]
  productKey ProductsKey[]
}

model Store {
  id         Int           @id @default(autoincrement())
  name       String        @unique @db.VarChar(50)
  productKey ProductsKey[]
}

model ProductsKey {
  id         Int      @id @default(autoincrement())
  price      Float
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    Int
  game       Game     @relation(fields: [gameId], references: [id])
  gameId     String
  platform   Platform @relation(fields: [platformId], references: [id])
  platformId Int
  cart       Cart?    @relation(fields: [cartId], references: [id])
  cartId     Int?
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  region     String
  available  Boolean  @default(true)
  key        Key[]
}

model Key{
  id  Int      @id @default(autoincrement())
  value String
  productKey      ProductsKey     @relation(fields: [productId], references: [id])
  productId Int

}

model Order {
  id        Int      @id @default(autoincrement())
  dateOrder DateTime @default(now())
  cart      Cart     @relation(fields: [idCart], references: [id])
  idCart    Int
  payment   Payment?
  status    Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Cart {
  id         Int           @id @default(autoincrement())
  productKey ProductsKey[]
  order      Order[]
  subTotal   Float
}

model Payment {
  id      Int    @id @default(autoincrement())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId Int    @unique
  amount  Float
  status  Status @default(PENDING)
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique @db.VarChar(50)
  rol         Rol           @default(USER)
  state       State         @default(STANDARD)
  userProduct ProductsKey[]
  order       Order[]
  enable      Boolean       @default(true)
}

enum Status {
  PENDING
  CANCEL
  FINISHED
}

enum Rol {
  USER
  ADMIN
}

enum State {
  PREMIUM
  STANDARD
}
